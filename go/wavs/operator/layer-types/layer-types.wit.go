// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package layertypes represents the imported interface "wavs:operator/layer-types@0.4.0-beta.4".
package layertypes

import (
	"go.bytecodealliance.org/cm"
)

// Timestamp represents the record "wavs:operator/layer-types@0.4.0-beta.4#timestamp".
//
//	record timestamp {
//		nanos: u64,
//	}
type Timestamp struct {
	_     cm.HostLayout `json:"-"`
	Nanos uint64        `json:"nanos"`
}

// CosmosAddress represents the record "wavs:operator/layer-types@0.4.0-beta.4#cosmos-address".
//
//	record cosmos-address {
//		bech32-addr: string,
//		prefix-len: u32,
//	}
type CosmosAddress struct {
	_          cm.HostLayout `json:"-"`
	Bech32Addr string        `json:"bech32-addr"`

	// prefix is the first part of the bech32 address
	PrefixLen uint32 `json:"prefix-len"`
}

// CosmosEvent represents the record "wavs:operator/layer-types@0.4.0-beta.4#cosmos-event".
//
//	record cosmos-event {
//		ty: string,
//		attributes: list<tuple<string, string>>,
//	}
type CosmosEvent struct {
	_          cm.HostLayout      `json:"-"`
	Ty         string             `json:"ty"`
	Attributes cm.List[[2]string] `json:"attributes"`
}

// CosmosChainConfig represents the record "wavs:operator/layer-types@0.4.0-beta.4#cosmos-chain-config".
//
//	record cosmos-chain-config {
//		chain-id: string,
//		rpc-endpoint: option<string>,
//		grpc-endpoint: option<string>,
//		grpc-web-endpoint: option<string>,
//		gas-price: f32,
//		gas-denom: string,
//		bech32-prefix: string,
//	}
type CosmosChainConfig struct {
	_               cm.HostLayout     `json:"-"`
	ChainID         string            `json:"chain-id"`
	RPCEndpoint     cm.Option[string] `json:"rpc-endpoint"`
	GrpcEndpoint    cm.Option[string] `json:"grpc-endpoint"`
	GrpcWebEndpoint cm.Option[string] `json:"grpc-web-endpoint"`
	GasPrice        float32           `json:"gas-price"`
	GasDenom        string            `json:"gas-denom"`
	Bech32Prefix    string            `json:"bech32-prefix"`
}

// EvmAddress represents the record "wavs:operator/layer-types@0.4.0-beta.4#evm-address".
//
//	record evm-address {
//		raw-bytes: list<u8>,
//	}
type EvmAddress struct {
	_        cm.HostLayout  `json:"-"`
	RawBytes cm.List[uint8] `json:"raw-bytes"`
}

// EvmEventLogData represents the record "wavs:operator/layer-types@0.4.0-beta.4#evm-event-log-data".
//
//	record evm-event-log-data {
//		topics: list<list<u8>>,
//		data: list<u8>,
//	}
type EvmEventLogData struct {
	_ cm.HostLayout `json:"-"`
	// the raw log topics that can be decoded into an event
	Topics cm.List[cm.List[uint8]] `json:"topics"`

	// the raw log data that can be decoded into an event
	Data cm.List[uint8] `json:"data"`
}

// EvmChainConfig represents the record "wavs:operator/layer-types@0.4.0-beta.4#evm-chain-config".
//
//	record evm-chain-config {
//		chain-id: string,
//		ws-endpoint: option<string>,
//		http-endpoint: option<string>,
//	}
type EvmChainConfig struct {
	_            cm.HostLayout     `json:"-"`
	ChainID      string            `json:"chain-id"`
	WsEndpoint   cm.Option[string] `json:"ws-endpoint"`
	HTTPEndpoint cm.Option[string] `json:"http-endpoint"`
}

// TriggerSourceEvmContractEvent represents the record "wavs:operator/layer-types@0.4.0-beta.4#trigger-source-evm-contract-event".
//
//	record trigger-source-evm-contract-event {
//		address: evm-address,
//		chain-name: string,
//		event-hash: list<u8>,
//	}
type TriggerSourceEvmContractEvent struct {
	_         cm.HostLayout  `json:"-"`
	Address   EvmAddress     `json:"address"`
	ChainName string         `json:"chain-name"`
	EventHash cm.List[uint8] `json:"event-hash"`
}

// TriggerSourceCosmosContractEvent represents the record "wavs:operator/layer-types@0.4.0-beta.4#trigger-source-cosmos-contract-event".
//
//	record trigger-source-cosmos-contract-event {
//		address: cosmos-address,
//		chain-name: string,
//		event-type: string,
//	}
type TriggerSourceCosmosContractEvent struct {
	_         cm.HostLayout `json:"-"`
	Address   CosmosAddress `json:"address"`
	ChainName string        `json:"chain-name"`
	EventType string        `json:"event-type"`
}

// BlockIntervalSource represents the record "wavs:operator/layer-types@0.4.0-beta.4#block-interval-source".
//
//	record block-interval-source {
//		chain-name: string,
//		n-blocks: u32,
//		start-block: option<u64>,
//		end-block: option<u64>,
//	}
type BlockIntervalSource struct {
	_          cm.HostLayout     `json:"-"`
	ChainName  string            `json:"chain-name"`
	NBlocks    uint32            `json:"n-blocks"`
	StartBlock cm.Option[uint64] `json:"start-block"`
	EndBlock   cm.Option[uint64] `json:"end-block"`
}

// TriggerSourceCron represents the record "wavs:operator/layer-types@0.4.0-beta.4#trigger-source-cron".
//
//	record trigger-source-cron {
//		schedule: string,
//		start-time: option<timestamp>,
//		end-time: option<timestamp>,
//	}
type TriggerSourceCron struct {
	_         cm.HostLayout        `json:"-"`
	Schedule  string               `json:"schedule"`
	StartTime cm.Option[Timestamp] `json:"start-time"`
	EndTime   cm.Option[Timestamp] `json:"end-time"`
}

// TriggerSource represents the variant "wavs:operator/layer-types@0.4.0-beta.4#trigger-source".
//
//	variant trigger-source {
//		evm-contract-event(trigger-source-evm-contract-event),
//		cosmos-contract-event(trigger-source-cosmos-contract-event),
//		block-interval(block-interval-source),
//		cron(trigger-source-cron),
//		manual,
//	}
type TriggerSource cm.Variant[uint8, BlockIntervalSourceShape, BlockIntervalSource]

// TriggerSourceEvmContractEvent_ returns a [TriggerSource] of case "evm-contract-event".
func TriggerSourceEvmContractEvent_(data TriggerSourceEvmContractEvent) TriggerSource {
	return cm.New[TriggerSource](0, data)
}

// EvmContractEvent returns a non-nil *[TriggerSourceEvmContractEvent] if [TriggerSource] represents the variant case "evm-contract-event".
func (self *TriggerSource) EvmContractEvent() *TriggerSourceEvmContractEvent {
	return cm.Case[TriggerSourceEvmContractEvent](self, 0)
}

// TriggerSourceCosmosContractEvent_ returns a [TriggerSource] of case "cosmos-contract-event".
func TriggerSourceCosmosContractEvent_(data TriggerSourceCosmosContractEvent) TriggerSource {
	return cm.New[TriggerSource](1, data)
}

// CosmosContractEvent returns a non-nil *[TriggerSourceCosmosContractEvent] if [TriggerSource] represents the variant case "cosmos-contract-event".
func (self *TriggerSource) CosmosContractEvent() *TriggerSourceCosmosContractEvent {
	return cm.Case[TriggerSourceCosmosContractEvent](self, 1)
}

// TriggerSourceBlockInterval returns a [TriggerSource] of case "block-interval".
func TriggerSourceBlockInterval(data BlockIntervalSource) TriggerSource {
	return cm.New[TriggerSource](2, data)
}

// BlockInterval returns a non-nil *[BlockIntervalSource] if [TriggerSource] represents the variant case "block-interval".
func (self *TriggerSource) BlockInterval() *BlockIntervalSource {
	return cm.Case[BlockIntervalSource](self, 2)
}

// TriggerSourceCron_ returns a [TriggerSource] of case "cron".
func TriggerSourceCron_(data TriggerSourceCron) TriggerSource {
	return cm.New[TriggerSource](3, data)
}

// Cron returns a non-nil *[TriggerSourceCron] if [TriggerSource] represents the variant case "cron".
func (self *TriggerSource) Cron() *TriggerSourceCron {
	return cm.Case[TriggerSourceCron](self, 3)
}

// TriggerSourceManual returns a [TriggerSource] of case "manual".
func TriggerSourceManual() TriggerSource {
	var data struct{}
	return cm.New[TriggerSource](4, data)
}

// Manual returns true if [TriggerSource] represents the variant case "manual".
func (self *TriggerSource) Manual() bool {
	return self.Tag() == 4
}

var _TriggerSourceStrings = [5]string{
	"evm-contract-event",
	"cosmos-contract-event",
	"block-interval",
	"cron",
	"manual",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v TriggerSource) String() string {
	return _TriggerSourceStrings[v.Tag()]
}

// TriggerConfig represents the record "wavs:operator/layer-types@0.4.0-beta.4#trigger-config".
//
//	record trigger-config {
//		service-id: string,
//		workflow-id: string,
//		trigger-source: trigger-source,
//	}
type TriggerConfig struct {
	_             cm.HostLayout `json:"-"`
	ServiceID     string        `json:"service-id"`
	WorkflowID    string        `json:"workflow-id"`
	TriggerSource TriggerSource `json:"trigger-source"`
}

// TriggerDataEvmContractEvent represents the record "wavs:operator/layer-types@0.4.0-beta.4#trigger-data-evm-contract-event".
//
//	record trigger-data-evm-contract-event {
//		contract-address: evm-address,
//		chain-name: string,
//		log: evm-event-log-data,
//		block-height: u64,
//	}
type TriggerDataEvmContractEvent struct {
	_               cm.HostLayout   `json:"-"`
	ContractAddress EvmAddress      `json:"contract-address"`
	ChainName       string          `json:"chain-name"`
	Log             EvmEventLogData `json:"log"`
	BlockHeight     uint64          `json:"block-height"`
}

// TriggerDataCosmosContractEvent represents the record "wavs:operator/layer-types@0.4.0-beta.4#trigger-data-cosmos-contract-event".
//
//	record trigger-data-cosmos-contract-event {
//		contract-address: cosmos-address,
//		chain-name: string,
//		event: cosmos-event,
//		block-height: u64,
//	}
type TriggerDataCosmosContractEvent struct {
	_               cm.HostLayout `json:"-"`
	ContractAddress CosmosAddress `json:"contract-address"`
	ChainName       string        `json:"chain-name"`
	Event           CosmosEvent   `json:"event"`
	BlockHeight     uint64        `json:"block-height"`
}

// BlockIntervalData represents the record "wavs:operator/layer-types@0.4.0-beta.4#block-interval-data".
//
//	record block-interval-data {
//		chain-name: string,
//		block-height: u64,
//	}
type BlockIntervalData struct {
	_           cm.HostLayout `json:"-"`
	ChainName   string        `json:"chain-name"`
	BlockHeight uint64        `json:"block-height"`
}

// TriggerDataCron represents the record "wavs:operator/layer-types@0.4.0-beta.4#trigger-data-cron".
//
//	record trigger-data-cron {
//		trigger-time: timestamp,
//	}
type TriggerDataCron struct {
	_           cm.HostLayout `json:"-"`
	TriggerTime Timestamp     `json:"trigger-time"`
}

// TriggerData represents the variant "wavs:operator/layer-types@0.4.0-beta.4#trigger-data".
//
//	variant trigger-data {
//		evm-contract-event(trigger-data-evm-contract-event),
//		cosmos-contract-event(trigger-data-cosmos-contract-event),
//		block-interval(block-interval-data),
//		cron(trigger-data-cron),
//		raw(list<u8>),
//	}
type TriggerData cm.Variant[uint8, TriggerDataCosmosContractEventShape, TriggerDataCosmosContractEvent]

// TriggerDataEvmContractEvent_ returns a [TriggerData] of case "evm-contract-event".
func TriggerDataEvmContractEvent_(data TriggerDataEvmContractEvent) TriggerData {
	return cm.New[TriggerData](0, data)
}

// EvmContractEvent returns a non-nil *[TriggerDataEvmContractEvent] if [TriggerData] represents the variant case "evm-contract-event".
func (self *TriggerData) EvmContractEvent() *TriggerDataEvmContractEvent {
	return cm.Case[TriggerDataEvmContractEvent](self, 0)
}

// TriggerDataCosmosContractEvent_ returns a [TriggerData] of case "cosmos-contract-event".
func TriggerDataCosmosContractEvent_(data TriggerDataCosmosContractEvent) TriggerData {
	return cm.New[TriggerData](1, data)
}

// CosmosContractEvent returns a non-nil *[TriggerDataCosmosContractEvent] if [TriggerData] represents the variant case "cosmos-contract-event".
func (self *TriggerData) CosmosContractEvent() *TriggerDataCosmosContractEvent {
	return cm.Case[TriggerDataCosmosContractEvent](self, 1)
}

// TriggerDataBlockInterval returns a [TriggerData] of case "block-interval".
func TriggerDataBlockInterval(data BlockIntervalData) TriggerData {
	return cm.New[TriggerData](2, data)
}

// BlockInterval returns a non-nil *[BlockIntervalData] if [TriggerData] represents the variant case "block-interval".
func (self *TriggerData) BlockInterval() *BlockIntervalData {
	return cm.Case[BlockIntervalData](self, 2)
}

// TriggerDataCron_ returns a [TriggerData] of case "cron".
func TriggerDataCron_(data TriggerDataCron) TriggerData {
	return cm.New[TriggerData](3, data)
}

// Cron returns a non-nil *[TriggerDataCron] if [TriggerData] represents the variant case "cron".
func (self *TriggerData) Cron() *TriggerDataCron {
	return cm.Case[TriggerDataCron](self, 3)
}

// TriggerDataRaw returns a [TriggerData] of case "raw".
func TriggerDataRaw(data cm.List[uint8]) TriggerData {
	return cm.New[TriggerData](4, data)
}

// Raw returns a non-nil *[cm.List[uint8]] if [TriggerData] represents the variant case "raw".
func (self *TriggerData) Raw() *cm.List[uint8] {
	return cm.Case[cm.List[uint8]](self, 4)
}

var _TriggerDataStrings = [5]string{
	"evm-contract-event",
	"cosmos-contract-event",
	"block-interval",
	"cron",
	"raw",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v TriggerData) String() string {
	return _TriggerDataStrings[v.Tag()]
}

// TriggerAction represents the record "wavs:operator/layer-types@0.4.0-beta.4#trigger-action".
//
//	record trigger-action {
//		config: trigger-config,
//		data: trigger-data,
//	}
type TriggerAction struct {
	_      cm.HostLayout `json:"-"`
	Config TriggerConfig `json:"config"`
	Data   TriggerData   `json:"data"`
}

// WasmResponse represents the record "wavs:operator/layer-types@0.4.0-beta.4#wasm-response".
//
//	record wasm-response {
//		payload: list<u8>,
//		ordering: option<u64>,
//	}
type WasmResponse struct {
	_        cm.HostLayout     `json:"-"`
	Payload  cm.List[uint8]    `json:"payload"`
	Ordering cm.Option[uint64] `json:"ordering"`
}

// LogLevel represents the variant "wavs:operator/layer-types@0.4.0-beta.4#log-level".
//
//	variant log-level {
//		error,
//		warn,
//		info,
//		debug,
//		trace,
//	}
type LogLevel uint8

const (
	LogLevelError LogLevel = iota
	LogLevelWarn
	LogLevelInfo
	LogLevelDebug
	LogLevelTrace
)

var _LogLevelStrings = [5]string{
	"error",
	"warn",
	"info",
	"debug",
	"trace",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e LogLevel) String() string {
	return _LogLevelStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e LogLevel) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *LogLevel) UnmarshalText(text []byte) error {
	return _LogLevelUnmarshalCase(e, text)
}

var _LogLevelUnmarshalCase = cm.CaseUnmarshaler[LogLevel](_LogLevelStrings[:])
