name: Publish Tag

on:
  push:
    # tags:
    #   - "v*"

env:
  CRATE_NAME: wavs-wasi-utils
  CRATE_PATH: packages/wavs-wasi-utils

jobs:
  publish_crate:
    if: false
    name: Verify and Publish Crate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Extract Crate Version
        id: version
        shell: bash
        run: |
          # Extract version from Cargo.toml
          VERSION=$(cargo read-manifest --manifest-path ${{ env.CRATE_PATH }}/Cargo.toml | jq -r .version)
          # Remove 'v' prefix from tag name for comparison
          TAG_VERSION="${GITHUB_REF_NAME#v}"

          # Verify tag matches Cargo.toml version
          if [ "$VERSION" != "$TAG_VERSION" ]; then
              echo "Error: Tag version '${{ github.ref_name }}' does not match Cargo.toml version '$VERSION'"
              exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if crate exists
        id: crate_exists
        shell: bash
        run: |
          # Check if this version already exists on crates.io
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "User-Agent: wavs-wasi-ci (https://github.com/Lay3rLabs/wavs-wasi)" \
            https://crates.io/api/v1/crates/${{ env.CRATE_NAME }}/${{ steps.version.outputs.version }})

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Crate ${{ env.CRATE_NAME }} version ${{ steps.version.outputs.version }} already exists"
          elif [ "$HTTP_STATUS" = "404" ]; then
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Crate ${{ env.CRATE_NAME }} version ${{ steps.version.outputs.version }} not found - OK to publish"
          else
            echo "Error: Unexpected HTTP status $HTTP_STATUS when checking crate"
            exit 1
          fi

      - name: Run cargo package
        if: steps.crate_exists.outputs.exists == 'false'
        uses: actions-rs/cargo@v1
        with:
          command: package
          args: --manifest-path ${{ env.CRATE_PATH }}/Cargo.toml

      - name: Publish to crates.io
        if: steps.crate_exists.outputs.exists == 'false'
        uses: actions-rs/cargo@v1
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        with:
          command: publish
          args: --manifest-path ${{ env.CRATE_PATH }}/Cargo.toml

  publish_wit:
    name: Publish WIT to wa.dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install wkg
        run: cargo install wkg

      - name: Install just
        uses: taiki-e/install-action@just

      - name: Create warg config directory and write config.json and authentication flat-files
        env: # https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions#example-using-bash
          WA_DEV_AUTH_TOKEN: ${{ secrets.WA_DEV_AUTH_TOKEN }}
          WA_DEV_SIGNING_KEY: ${{ secrets.WA_DEV_SIGNING_KEY }}
        # wkg cannot set the warg configuration for authentication at this time.
        # This is a workaround to set the warg configuration without installing the `warg-cli`.
        run: |
          cat > wkg-config.toml << EOF
          default_registry = "wavs.wa.dev"

          [registry."wavs.wa.dev".warg]
          auth_token = "$WA_DEV_AUTH_TOKEN"
          signing_key = "$WA_DEV_SIGNING_KEY"
          EOF

      - name: Build wit
        run: just wit-build wkg-config.toml

      - name: Publish wasm to wa.dev
        run: just wit-publish wkg-config.toml
