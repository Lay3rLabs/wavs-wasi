interface core {
    // Basic types
    type chain-name = string;
    type digest = string;

  record timestamp {
    nanos: u64
  }

  record cosmos-address {
    bech32-addr: string,
    // prefix is the first part of the bech32 address
    prefix-len: u32
  }

  record cosmos-event {
    ty: string,
    attributes: list<tuple<string, string>>,
  }

  record cosmos-chain-config {
    chain-id: string,
    rpc-endpoint: option<string>,
    grpc-endpoint: option<string>,
    grpc-web-endpoint: option<string>,
    gas-price: f32,
    gas-denom: string,
    bech32-prefix: string,
  }

  record evm-address {
    raw-bytes: list<u8>
  }

  record evm-event-log-data {
    // the raw log topics that can be decoded into an event
    topics: list<list<u8>>,
    // the raw log data that can be decoded into an event
    data: list<u8>,
  }

  record evm-chain-config {
    chain-id: string,
    ws-endpoint: option<string>,
    http-endpoint: option<string>,
  }

  record trigger-action {
    config: trigger-config,
    data: trigger-data
  }

  record trigger-config {
    service-id: string,
    workflow-id: string,
    trigger: trigger
  }

  variant trigger {
    evm-contract-event(trigger-source-evm-contract-event),
    cosmos-contract-event(trigger-source-cosmos-contract-event),
    block-interval(block-interval-source),
    cron(trigger-source-cron),
    manual
  }

  record trigger-source-evm-contract-event {
    address: evm-address,
    chain-name: string,
    event-hash: list<u8>
  }

  record trigger-source-cosmos-contract-event {
    address: cosmos-address,
    chain-name: string,
    event-type: string
  }

  record block-interval-source {
    chain-name: string,
    n-blocks: u32,
    start-block: option<u64>,
    end-block: option<u64>
  }

  record trigger-source-cron {
    schedule: string,
    start-time: option<timestamp>,
    end-time: option<timestamp>
  }

  variant trigger-data {
    evm-contract-event(trigger-data-evm-contract-event),
    cosmos-contract-event(trigger-data-cosmos-contract-event),
    block-interval(block-interval-data),
    cron(trigger-data-cron),
    raw(list<u8>)
  }

  record trigger-data-evm-contract-event {
    contract-address: evm-address,
    chain-name: string,
    log: evm-event-log-data,
    block-height: u64
  }

  record trigger-data-cosmos-contract-event {
    contract-address: cosmos-address,
    chain-name: string,
    event: cosmos-event,
    block-height: u64
  }

  record block-interval-data {
    chain-name: string,
    block-height: u64
  }

  record trigger-data-cron {
    trigger-time: timestamp
  }

  record wasm-response {
    payload: list<u8>,
    ordering: option<u64>
  }

  variant log-level {
    error,
    warn,
    info,
    debug,
    trace
  }
}