package wavs:operator@0.6.0-alpha.13;

use wavs:types/core@0.6.0-alpha.12 as core-types;
use wavs:types/service@0.6.0-alpha.12 as service-types;
use wavs:types/chain@0.6.0-alpha.12 as chain-types;
use wavs:types/events@0.6.0-alpha.12 as event-types;

interface input {
    use service-types.{service-id, workflow-id, trigger};
    use event-types.{trigger-data};

    record trigger-action {
        config: trigger-config,
        data: trigger-data
    }

    record trigger-config {
        service-id: service-id,
        workflow-id: workflow-id,
        trigger: trigger
    }
}

interface output {
    record wasm-response {
        payload: list<u8>,
        ordering: option<u64>
    }
}

world wavs-world {
    // include needed for golang support
    include wasi:cli/imports@0.2.0;

    // wasi:http 0.2.6 uses the `imports` style, but for now import each interface separately
    import wasi:http/types@0.2.0;
    import wasi:http/outgoing-handler@0.2.0;

    // for key-value store support
    include wasi:keyvalue/imports@0.2.0-draft2;

    import host: interface {
        use chain-types.{evm-chain-config, cosmos-chain-config};
        use service-types.{service-and-workflow-id, workflow-and-workflow-id};
        use core-types.{log-level};

        get-evm-chain-config: func(chain-key: string) -> option<evm-chain-config>;
        get-cosmos-chain-config: func(chain-key: string) -> option<cosmos-chain-config>;

        config-var: func(key: string) -> option<string>;

        log: func(level: log-level, message: string);

        // gets the service and workflow id that called this component
        get-service: func() -> service-and-workflow-id;

        // convenience function to get the workflow without having to walk service.workflows
        get-workflow: func() -> workflow-and-workflow-id;
    }

    use input.{trigger-action};
    use output.{wasm-response};

    export run: func(trigger-action: trigger-action) -> result<option<wasm-response>, string>;
}
