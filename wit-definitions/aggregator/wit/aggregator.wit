package wavs:aggregator@0.6.0-alpha.2;

use wavs:types/core@0.6.0-alpha.2 as core-types;
use wavs:types/service@0.6.0-alpha.2 as service-types;
use wavs:types/chain@0.6.0-alpha.2 as chain-types;

interface aggregator {
    use service-types.{service, workflow-id};
    use chain-types.{chain-name, evm-address};

    record envelope {
        event-id: list<u8>,
        ordering: list<u8>,
        payload: list<u8>,
    }

    record secp256k1-signature {
        signature-data: list<u8>,
    }

    variant envelope-signature {
        secp256k1(secp256k1-signature),
    }

    record packet {
        service: service,
        workflow-id: workflow-id,
        envelope: envelope,
        signature: envelope-signature,
    }

    variant aggregator-action {
        timer(timer-action),
        submit(submit-action),
    }

    record timer-action {
        delay: u64,
    }

    record submit-action {
        chain-name: chain-name,
        contract-address: evm-address,
    }
}

world aggregator-world {
    // include needed for golang support
    include wasi:cli/imports@0.2.0;

    // wasi:http 0.2.6 uses the `imports` style, but for now import each interface separately
    import wasi:http/types@0.2.0;
    import wasi:http/outgoing-handler@0.2.0;

    // for key-value store support
    include wasi:keyvalue/imports@0.2.0-draft2;

    import host: interface {
        use chain-types.{evm-chain-config, cosmos-chain-config};
        use core-types.{log-level};

        get-evm-chain-config: func(chain-name: string) -> option<evm-chain-config>;
        get-cosmos-chain-config: func(chain-name: string) -> option<cosmos-chain-config>;

        config-var: func(key: string) -> option<string>;

        log: func(level: log-level, message: string);
    }

    use aggregator.{packet, aggregator-action};
    use chain-types.{any-tx-hash};

    export process-packet: func(packet: packet) -> result<list<aggregator-action>, string>;

    export handle-timer-callback: func(packet: packet) -> result<list<aggregator-action>, string>;

    export handle-submit-callback: func(packet: packet, tx-result: result<any-tx-hash, string>) -> result<bool, string>;
}
